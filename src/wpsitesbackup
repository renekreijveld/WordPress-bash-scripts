#!/bin/bash

# wpsitesbackup -- Create a full backup (including database) of all WordPress websites.
#
# Copyright 2020 Rene Kreijveld - email@renekreijveld.nl
#
# This program is free software; you may redistribute it and/or modify it.
#
# Version history
# 1.0 Initial version

# define variables
# version
version=1.0
# start folder where we start searching
startdir=/home
# where to store backup files
storepath=/backups/sites

# determine path of script
mypath=$(cd $(dirname ${0}); pwd -P)
myname=$(basename ${0})

# check if folder for backup storage exists
if [ ! -d "${storepath}" ]
then
	echo "Backup directory does not exist!"
	exit 1
fi

# create dummy folder if needed
if [ ! -d /dummy ]
then
	mkdir /dummy
fi

# display usage information
usage() {
	echo ""
	echo "${myname} version ${version}, written by Rene Kreijveld."
	echo ""
	echo "Usage: ${myname} [-b <backups>] [-n] [-z] [-s] [-h]"
	echo ""
	echo "Default action is an tar-gzip backup."
	echo "-b Number of backups to keep, '-b 2' means keep 2 backups. Default is 4."
	echo "-z Zip. Backup to a zipfile instead of a tar-gzip file."
	echo "-s Silent. No progress messages will be shown."
	echo "-h Help. Display this info."
	echo ""
	exit 0
}

# process the arguments
savebackups=7
tgz="yes"
zip="no"
extension=tgz
silent="no"
while getopts b:zsh opt
do
	case "${opt}" in
		b)  savebackups=${OPTARG}
			;;
		z)  zip="yes"
			extension=zip
			;;
		s)  silent="yes"
			;;
		h)  usage
			;;
		\?) echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
		:)  echo "Option -$OPTARG requires an argument." >&2
			exit 1
			;;
	esac
done

if [ "${silent}" == "no" ]
then
	echo ""
	echo "${myname} version ${version}, written by Rene Kreijveld."
	echo ""
fi

for dir in $(find ${startdir} -maxdepth 4 -type d)
do
	if [ -f ${dir}/wp-config.php ]
	then
		# possible wordpress found
		if [ "${silent}" == "no" ]
		then
			echo "Possible WordPress found at ${dir}"
		fi
		cd ${dir}
		if [ ! -e ${mypath}/wpfunctions ]
		then
			echo ""
			echo "Cannot continue: script wpfunctions not found."
			echo ""
			exit 1
		fi
		# include general functions
		. ${mypath}/wpfunctions

		# dump the database to a .sql file
		if [ "${silent}" == "no" ]
		then
			echo "Creating database dump."
			wp --allow-root db export dbdump.sql --add-drop-table
		else
			wp --allow-root db export dbdump.sql --add-drop-table --quiet
		fi
		# check if the file htaccess is present
		if [ -e .htaccess ]
		then
			htaccess=".htaccess"
		else
			htaccess=""
		fi

		# create date/time stamp
		now=$(date +"%Y%m%d.%H%M%S")

		# create the backup
		if [ "${zip}" == "no" ]
		then
			tar czf ${sitename}.${now}.${extension} ${htaccess} *
		else
			zip -q -r ${sitename}.${now}.${extension} ${htaccess} *
		fi
		mv ${sitename}.${now}.${extension} ${storepath}
		# cleanup the datebase dump
		rm -f dbdump.sql
		if [ "${silent}" == "no" ]
		then
			echo "Your backup is ready in ${storepath}/${sitename}.${now}.${extension}"
		fi
	fi
done

# cleanup backups older than savebackups days
cd /dummy
find ${storepath}/* -type f -mtime +${savebackups} -delete
